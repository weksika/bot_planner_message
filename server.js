import "dotenv/config";
import { Telegraf } from "telegraf";
import fetch from "node-fetch";
import cron from "node-cron";

const bot = new Telegraf(process.env.BOT_TOKEN);
const users = new Set();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userTodos = {};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
async function getCellValue(cell) {
  try {
    const url = `${process.env.WEBAPP_URL}?cell=${cell}`;
    const res = await fetch(url);
    const data = await res.json(); // { value: "—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏" }
    return data.value;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:", err);
    return null;
  }
}
async function setCellValue(cell, value) {
  try {
    const url = `${process.env.WEBAPP_URL}?cell=${cell}&value=${encodeURIComponent(value)}`;
    const res = await fetch(url);
    const data = await res.json();
    return data.status === "ok";
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:", err);
    return false;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ–ª
function getTodoKeyboard(userId) {
  const todos =
    userTodos[userId] ||
    [
      { text: "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω", done: false },
      { text: "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É", done: false },
      { text: "–ü–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É", done: false },
    ];

  return {
    reply_markup: {
      inline_keyboard: [
        ...todos.map((t, i) => [
          {
            text: `${t.done ? "‚úÖ" : "‚òëÔ∏è"} ${t.text}`,
            callback_data: `toggle_${i}`,
          },
        ]),
        [{ text: "–ì–æ—Ç–æ–≤–æ", callback_data: "done" }],
      ],
    },
  };
}

function editDate(date) {
  let currentDate = new Date(date);
  let weekday = currentDate.getDay();
  let str = '';
  switch(weekday) {
  case 1: 
    str = 'D';
    break;
  case 2: 
    str = 'J';
    break;
  case 3: 
    str = 'P';
    break;
  case 4: 
    str = 'V';
    break;
  case 5: 
    str = 'AB';
    break;
  case 6: 
    str = 'AH';
    break;
  case 0: 
    str = 'AN';
    break;
  default:
    break;
}
return str;
}

function func_week_number(date){
  
  const dayOfMonth = date.getDate();
  let weekday = date.getDay();
  let week_number = 1;
  let vskr;
  if(dayOfMonth - weekday > 0 && weekday != 0){
   vskr = dayOfMonth - weekday;
   week_number = week_number + 1;
  } else {
    vskr = dayOfMonth + weekday;
  }
  for(let i = vskr; i > 7; i = i - 7){
    week_number++;
  }
  return week_number
}


// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendDailyMessage(chatId) {
  let curDate = new Date();
  let wn = func_week_number(curDate);
  let str = editDate(curDate);
   let charCode;
    let numstr;
    if(str.length > 1){
      charCode = str.charCodeAt(1);  
      numstr = str[0] + String.fromCharCode(charCode - 1);
    } else {
      charCode = str.charCodeAt(0);  
      numstr = String.fromCharCode(charCode - 1);
    }
  const userTasks = {}; // –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
  const numTasks = 8; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å

  for (let i = 1; i <= numTasks; i++) {
    const taskCell = `${str}${(2 + (10*wn)) + i}`; // —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    const checkCell = `${numstr}${(2 + (10*wn)) + i}`; // —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏

    const taskText = await getCellValue(taskCell);
    if (!taskText) continue; // –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ null –∏–ª–∏ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    const taskCheckRaw = await getCellValue(checkCell);
    const taskDone = taskCheckRaw === true || taskCheckRaw === "TRUE" || taskCheckRaw === "1";

    userTasks[`task${i}`] = {
      text: taskText,
      done: taskDone,
    };
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
  const tasksArray = Object.values(userTasks);
  if (tasksArray.length === 0) return; // –Ω–µ—Ç –∑–∞–¥–∞—á ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

  if (!userTodos[chatId]) {
    userTodos[chatId] = tasksArray;
  }

  const message = `üìù –°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:`;
  try {
    await bot.telegram.sendMessage(chatId, message, getTodoKeyboard(chatId));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
  }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
  users.add(ctx.from.id);
  console.log("–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", ctx.from.id);
});

bot.command("id", (ctx) => {
  ctx.reply(`–¢–≤–æ–π Telegram ID: ${ctx.from.id}`);
  users.add(ctx.from.id);
  console.log("–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", ctx.from.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ —á–µ–∫–±–æ–∫—Å–∞–º
bot.on("callback_query", async (ctx) => {
  const chatId = ctx.from.id;
  const data = ctx.callbackQuery.data;

  if (!userTodos[chatId]) return;

  if (data.startsWith("toggle_")) {
    const index = parseInt(data.split("_")[1]); // –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
    const todo = userTodos[chatId][index];
    let curDate = new Date();
    let str = editDate(curDate);
    let wn = func_week_number(curDate);

    // –Ω–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ (—Å–æ—Å–µ–¥–Ω—è—è —Å–ª–µ–≤–∞ –æ—Ç —Ç–µ–∫—Å—Ç–∞)
    let charCode;
    let numstr;
    if (str.length > 1) {
      charCode = str.charCodeAt(1);  
      numstr = str[0] + String.fromCharCode(charCode - 1);
    } else {
      charCode = str.charCodeAt(0);  
      numstr = String.fromCharCode(charCode - 1);
    }

    // —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
    const row = (2 + (10 * wn)) + (index + 1);

    // –º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    todo.done = !todo.done;

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    const checkCell = `${numstr}${row}`;
    await setCellValue(checkCell, todo.done ? "TRUE" : "FALSE");

    // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –±–æ—Ç–µ
    await ctx.editMessageReplyMarkup(getTodoKeyboard(chatId).reply_markup);
    await ctx.answerCbQuery();
  }
});
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"));

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 (—Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞)
cron.schedule("0 10 * * *", () => {
  console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
  users.forEach((id) => sendDailyMessage(id));
});